<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[所见及所得]]></title>
    <url>%2F%E6%89%80%E8%A7%81%E5%8F%8A%E6%89%80%E5%BE%97.html</url>
    <content type="text"><![CDATA[## 配置一套直接生成活动页面后台系统 做活动的肯定经历过在上线前几分钟还有需求过来要调整这调整那，为了解决这个痛点，项目应用而生。。。。mkmk jiods]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue 可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker初体验]]></title>
    <url>%2Fdocker%E5%88%9D%E4%BD%93%E9%AA%8C.html</url>
    <content type="text"><![CDATA[docker 常用命令docker start container-namedocker stop container-namedocker rm container-namedemoceshi好的222233 参考资料docker安装nginx-ppppp]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac MySQL Server 启动无效]]></title>
    <url>%2F%E5%90%AF%E5%8A%A8%E6%97%A0%E6%95%88.html</url>
    <content type="text"><![CDATA[mac MySQL Server 启动无效从系统偏好设置启动MySQL时，多次点击start无效，发现下面显示了一行警告“Warning the user/local/mysql/data directory is not owned by the mysql user”百度没找到能用的解决方案，后来在stackoverflow上找到了能用的，原文链接如下： http://stackoverflow.com/questions/5527676/warning-the-user-local-mysql-data-directory-is-not-owned-by-the-mysql-user/27517150#27517150 在终端输入以下命令（需密码），再点击start即可 12345678sudo chown -RL root:mysql /usr/local/mysqlsudo chown -RL mysql:mysql /usr/local/mysql/datasudo /usr/local/mysql/support-files/mysql.server start PS：如果你忘了MySQL的密码，这个文章有修改密码的步骤，比其他罗里吧嗦的好很多。地址在这里—&gt; http://www.cnblogs.com/lihuanqing/p/5623872.html MAMP中的mysql密码（默认root - root）和自行安装的mysql密码不同。]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[expreess和koa]]></title>
    <url>%2Fexpress%E5%92%8Ckoa.html</url>
    <content type="text"><![CDATA[expressexpress 是第一代web框架，对node的http模块进行了封装 12345678var express = require('express');var app = express();app.get('/', function (req, res) &#123; res.send('Hello World!');&#125;);app.listen(3000, function () &#123; console.log('Example app listening on port 3000!');&#125;); express 的api虽然非常简单，但是他是基于ES5的语法，要实现异步代码只能通过回调的方式，异步嵌套过多代码会非常难看。 koa1随着nodejs开始支持es6，express 团队基于es6的generator写了koa1。 1234567891011var koa = require('koa');var app = koa();app.use('/test', function *() &#123; yield doReadFile1(); var data = yield doReadFile2(); this.body = data;&#125;);app.listen(3000); koa2完全使用promise配合async await来实现异步 12345678app.use(async (ctx, next) =&gt; &#123; await next(); var data = await doReadFile(); ctx.response.type = 'text/plain'; ctx.response.body = data;&#125;); 出于兼容性考虑，目前koa2仍支持generator的写法，但下一个版本将会去掉…]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-生命周期]]></title>
    <url>%2Fvue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</url>
    <content type="text"><![CDATA[vue 生命周期深入 单组件的生命周期 父子组件的生命周期 兄弟组件的生命周期 宏mixin的生命周期 生命周期：Vue 实例从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期，各个阶段有相对应的事件钩子 1. 生命周期钩子函数下面这张图是vue生命周期各个阶段的执行情况： | 生命周期钩子 | 组件状态 | 最佳实践 ||—————|——————————————————————————|———————————|| beforeCreate | 实例初始化之后，this指向创建的实例，不能访问到data、computed、watch、methods上的方法和数据 | 常用于初始化非响应式变量 || created | 实例创建完成，可访问data、computed、watch、methods上的方法和数据，未挂载到DOM，不能访问到$el属性，$ref属性内容为空数组 | 常用于简单的ajax请求，页面的初始化 || beforeMount | 在挂载开始之前被调用，beforeMount之前，会找到对应的template，并编译成render函数 | – || mounted | 实例挂载到DOM上，此时可以通过DOM API获取到DOM节点，$ref属性可以访问 | 常用于获取VNode信息和操作，ajax请求 || beforeupdate | 响应式数据更新时调用，发生在虚拟DOM打补丁之前 | 适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器 || updated | 虚拟 DOM 重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作 | 避免在这个钩子函数中操作数据，可能陷入死循环 || beforeDestroy | 实例销毁之前调用。这一步，实例仍然完全可用，this仍能获取到实例 | 常用于销毁定时器、解绑全局事件、销毁插件对象等操作 || destroyed | 实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁 | – | 注意： created阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染 完毕，可以用 vm.$nextTick vue2.0之后主动调用$destroy()不会移除dom节点，作者不推荐直接destroy这种做法，如果实在需要这样用可以在这个生命周期钩子中手动移除dom节点 2. 单个组件的生命周期现根据实际代码执行情况分析： 1234567&lt;template&gt; &lt;div&gt; &lt;h3&gt;单组件&lt;/h3&gt; &lt;el-button @click="dataVar += 1"&gt;更新 &#123;&#123;dataVar&#125;&#125;&lt;/el-button&gt; &lt;el-button @click="handleDestroy"&gt;销毁&lt;/el-button&gt; &lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425262728293031323334353637export default &#123; data() &#123; return &#123; dataVar: 1 &#125; &#125;, beforeCreate() &#123; this.compName = 'single' console.log(`--$&#123;this.compName&#125;--beforeCreate`) &#125;, created() &#123; console.log(`--$&#123;this.compName&#125;--created`) &#125;, beforeMount() &#123; console.log(`--$&#123;this.compName&#125;--beforeMount`) &#125;, mounted() &#123; console.log(`--$&#123;this.compName&#125;--mounted`) &#125;, beforeUpdate() &#123; console.log(`--$&#123;this.compName&#125;--beforeUpdate`) &#125;, updated() &#123; console.log(`--$&#123;this.compName&#125;--updated`) &#125;, beforeDestroy() &#123; console.log(`--$&#123;this.compName&#125;--beforeDestroy`) &#125;, destroyed() &#123; console.log(`--$&#123;this.compName&#125;--destroyed`) &#125;, methods: &#123; handleDestroy() &#123; this.$destroy() &#125; &#125;&#125; 初始化组件时，仅执行了beforeCreate/Created/beforeMount/mounted四个钩子函数 当改变data中定义的变量（响应式变量）时，会执行beforeUpdate/updated钩子函数 当切换组件（当前组件未缓存）时，会执行beforeDestory/destroyed钩子函数 初始化和销毁时的生命钩子函数均只会执行一次，beforeUpdate/updated可多次执行 3. 父子组件的生命周期将单组件作为基础组件（由于props在beforeCreate()中未初始化），需要做如下更改： 123456789101112props: &#123; compName: &#123; type: String, default: 'single' &#125;&#125;,beforeCreate() &#123; // this.compName = 'single' // console.log(`--$&#123;this.compName&#125;--beforeCreate`) console.log(` --data未初始化--beforeCreate`)&#125;, 父组件代码如下： 123456&lt;template&gt; &lt;div class="complex"&gt; &lt;h3&gt;复杂组件&lt;/h3&gt; &lt;lifecycle-single compName="child"&gt;&lt;/lifecycle-single&gt; &lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233const COMPONENT_NAME = 'complex' import LifecycleSingle from './LifeCycleSingle' export default &#123; beforeCreate() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--beforeCreate`) &#125;, created() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--created`) &#125;, beforeMount() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--beforeMount`) &#125;, mounted() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--mounted`) &#125;, beforeUpdate() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--beforeUpdate`) &#125;, updated() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--updated`) &#125;, beforeDestroy() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--beforeDestroy`) &#125;, destroyed() &#123; console.log(`--$&#123;COMPONENT_NAME&#125;--destroyed`) &#125;, components: &#123; LifecycleSingle &#125;&#125; 仅当子组件完成挂载后，父组件才会挂载 当子组件完成挂载后，父组件会主动执行一次beforeUpdate/updated钩子函数（仅首次） 父子组件在data变化中是分别监控的，但是在更新props中的数据是关联的（可实践） 销毁父组件时，先将子组件销毁后才会销毁父组件 4. 兄弟组件的生命周期在上面的基础上，复杂组件做如下更改 123456789&lt;template&gt; &lt;div class="complex"&gt; &lt;h3&gt;复杂组件&lt;/h3&gt; &lt;lifecycle-single compName="cihld1"&gt;&lt;/lifecycle-single&gt; &lt;lifecycle-single compName="child2"&gt;&lt;/lifecycle-single&gt; &lt;el-button @click="dataVar += 1"&gt;complex更新 &#123;&#123;dataVar&#125;&#125;&lt;/el-button&gt; &lt;el-button @click="handleDestroy"&gt;complex销毁&lt;/el-button&gt; &lt;/div&gt;&lt;/template&gt; 组件的初始化（mounted之前）分开进行，挂载是从上到下依次进行 当没有数据关联时，兄弟组件之间的更新和销毁是互不关联的]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli3]]></title>
    <url>%2Fvue-cli3.html</url>
    <content type="text"><![CDATA[学习资料 官网 安装准备条件 nodejs npm webpack Vue CLI 3需要 nodeJs ≥ 8.9 (官方推荐 8.11.0+，你可以使用 nvm 或 nvm-windows在同一台电脑中管理多个 Node 版本） 安装-2 安装# 检查是否缺少环境npm list -g --depth 0 # 安装vue-cli 3.xnpminstall -g @vue/cli # 查看cli版本 vue -V //vue --versionVue CLI 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了 2.x和3.x共存如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具 npminstall -g @vue/cli-init安装完后 就还可以使用 vue init 命令 vue init webpack my_project创建项目2.xvue init webpack test // 初始化项目 不支持驼峰（含大写字母） cdtest // 移动到当前项目跟文件夹 npminstall // 安装依赖 npm run dev // 打开本地测试的生产环境3.xvue create test // 初始化项目 不支持驼峰（含大写字母） cdtest // 移动到当前项目跟文件夹 npminstall // 安装依赖（其实不用，可以略过安装依赖） npm run serve // 打开本地测试的生产环境详细创建步骤 会提示你选择一个preset（预设） 有：会显示预设 无：只有另外2项 default（babel，eslint）： 默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的npm包 Manually select features： 手动配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的 npm 包 手动配置，根据你需要用方向键选择 按 “空格键”选择/取消选择 A键全选/取消全选 123456789() Babel//转码器，可以将ES6代码转为ES5代码，从而在现有环境执行() TypeScript // TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了JavaScript 的语法，需要被编译输出为JavaScript在浏器运行，目前较少人再用() Progressive Web App (PWA) Support// 渐进式Web应用程序() Router // vue-router（vue路由）() Vuex // vuex（vue的状态管理模式）() CSS Pre-processors // CSS 预处理器（如：less、sass）() Linter / Formatter // 代码风格检查和格式化（如：ESlint）() Unit Testing // 单元测试（unit tests）() E2E Testing // e2e（end to end） 测试 是否使用history router css预处理器 ESLint：提供一个插件化的javascript代码检测工具 何时检测 单元测试 如何存放配置 是否保存本次配置（之后可以直接使用） 2.x 和3.x 区别vuex（状态管理）router-（路由）去掉-static-、-新增-public-文件夹index-htmlsrc-views去掉-build（根据config中的配置来定义规则）、config（配置不同环境的参数）文件夹)babel-config-js根目录的一些其他文件的改变vue-uitest通过vue的图形化界面 安装新的项目 # 运行项目，即可自动打开浏览器，图形化创建项目 vue ui]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MVVM和MVC]]></title>
    <url>%2FMVVM%E5%92%8CMVC.html</url>
    <content type="text"><![CDATA[概述MVC，MVP和MVVM都是常见的软件架构设计模式（Architectural Pattern），它通过分离关注点来改进代码的组织方式。不同于设计模式（Design Pattern），只是为了解决一类问题而总结出的抽象方法，一种架构模式往往使用了多种设计模式。 要了解MVC、MVP和MVVM，就要知道它们的相同点和不同点。不同部分是C(Controller)、P(Presenter)、VM(View-Model)，而相同的部分则是MV(Model-View)。 MVC模式MVC模式（Model–view–controller）: 是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。 模型（Model） - Model层用于封装和应用程序的业务逻辑相关的数据以及对数据的处理方法。一旦数据发生变化，模型将通知有关的视图。 视图（View） - View作为视图层，主要负责数据的展示,并且响应用户操作. 控制器（Controller）- 控制器是模型和视图之间的纽带，接收View传来的用户事件并且传递给Model，同时利用从Model传来的最新模型控制更新View. 数据关系: View 接受用户交互请求 View 将请求转交给Controller Controller 操作Model进行数据更新 数据更新之后，Model通知View更新数据变化.PS: 还有一种是View作为Observer监听Model中的任意更新，一旦有更新事件发出，View会自动触发更新以展示最新的Model状态.这种方式提升了整体效率，简化了Controller的功能，不过也导致了View与Model之间的紧耦合。 View 更新变化数据 方式: 所有方式都是单向通信 结构实现: View ：使用 组合(Composite)模式 View和Controller：使用 策略(Strategy)模式 Model和 View：使用 观察者(Observer)模式同步信息 缺点: View层过重: View强依赖于Model的,并且可以直接访问Model.所以不可避免的View还要包括一些业务逻辑.导致view过重,后期修改比较困难,且复用程度低. View层与Controller层也是耦合紧密: View与Controller虽然看似是相互分离，但却是联系紧密.经常View和Controller一一对应的，捆绑起来作为一个组件使用.解耦程度不足. MVP模式MVP（Model-View-Presenter）是MVC模式的改良.MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller。 Model - Model层依然是主要与业务相关的数据和对应处理数据的方法。 View - View依然负责显示,但MVP中的View并不能直接使用Model Presenter - Presenter作为View和Model之间的“中间人”，且MVP中的View并不能直接使用Model，而是通过为Presenter提供接口，让Presenter去更新Model，再通过观察者模式更新View。 数据关系: View 接收用户交互请求 View 将请求转交给 Presenter Presenter 操作Model进行数据更新 Model 通知Presenter数据发生变化 Presenter 更新View数据 方式: 各部分之间都是双向通信 结构实现: View ：使用 组合(Composite)模式 View和Presenter：使用 中介者(Mediator)模式 Model和Presenter：使用 命令(Command)模式同步信息 MVC和MVP关系 MVP：是MVC模式的变种。 项目开发中，UI是容易变化的，且是多样的，一样的数据会有N种显示方式；业务逻辑也是比较容易变化的。为了使得应用具有较大的弹性，我们期望将UI、逻辑（UI的逻辑和业务逻辑）和数据隔离开来，而MVP是一个很好的选择。 Presenter代替了Controller，它比Controller担当更多的任务，也更加复杂。Presenter处理事件，执行相应的逻辑，这些逻辑映射到Model操作Model。那些处理UI如何工作的代码基本上都位于Presenter。 MVC中的Model和View使用Observer模式进行沟通；MPV中的Presenter和View则使用Mediator模式进行通信；Presenter操作Model则使用Command模式来进行。基本设计和MVC相同：Model存储数据，View对Model的表现，Presenter协调两者之间的通信。在MVP 中 View 接收到事件，然后会将它们传递到 Presenter, 如何具体处理这些事件，将由Presenter来完成。 MVP的优点: Model与View完全分离，修改互不影响 更高效地使用，因为所有的逻辑交互都发生在一个地方—Presenter内部 一个Preseter可用于多个View，而不需要改变Presenter的逻辑（因为View的变化总是比Model的变化频繁）。 更便于测试。把逻辑放在Presenter中，就可以脱离用户接口来测试逻辑（单元测试） MVP的缺点: Presenter中除了业务逻辑以外，还有大量的View-&gt;Model，Model-&gt;View的手动同步逻辑，造成Presenter比较笨重，一旦视图需要变更，那么Presenter也需要变更,维护起来比较困难。 MVVM模式MVVM是Model-View-ViewModel的简写。由Microsoft提出，并经由Martin Fowler布道传播。在 MVVM 中，不需要Presenter手动地同步View和Model.View 是通过数据驱动的，Model一旦改变就会相应的刷新对应的 View，View 如果改变，也会改变对应的Model。这种方式就可以在业务处理中只关心数据的流转，而无需直接和页面打交道。ViewModel 只关心数据和业务的处理，不关心 View 如何处理数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel 中，让多个 View 复用这个 ViewModel。 Model - Model层仅仅关注数据本身，不关心任何行为（格式化数据由View负责），这里可以把它理解为一个类似json的数据对象。 View - MVVM中的View通过使用模板语法来声明式的将数据渲染进DOM，当ViewModel对Model进行更新的时候，会通过数据绑定更新到View。 ViewModel - 类似与Presenter. ViewModel会对View 层的声明进行处理.当 ViewModel 中数据变化，View 层会进行更新;如果是双向绑定,一旦View对绑定的数据进行操作，则ViewModel 中的数据也会进行自动更新. 数据关系: View 接收用户交互请求 View 将请求转交给ViewModel ViewModel 操作Model数据更新 Model 更新完数据，通知ViewModel数据发生变化 ViewModel 更新View数据 方式: 双向绑定。View/Model的变动，自动反映在 ViewModel，反之亦然。 实现数据绑定的方式： 数据劫持 (Vue) 发布-订阅模式 (Knockout、Backbone) 脏值检查 (旧版Angular) 使用: 可以兼容你当下使用的 MVC/MVP 框架。 增加你的应用的可测试性。 配合一个绑定机制效果最好。 MVVM优点:MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点: 1,低耦合。View可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。 2,可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。 3, 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，生成xml代码。 4, 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。 MVVM缺点: 类会增多，ViewModel会越加庞大，调用的复杂度增加。 感谢及参考 GUI 应用程序架构的十年变迁：MVC、MVP、MVVM、Unidirectional、Clean 【框架篇】mvc、mvp、mvvm使用关系总结 MVC，MVP 和 MVVM的图示 浅析前端开发中的 MVC/MVP/MVVM 模式]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试整理]]></title>
    <url>%2F%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86.html</url>
    <content type="text"><![CDATA[最近去面试整理的一些题目移动端meta能写什么 viewport 视口 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang = ""&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset = "utf-8"&gt; &lt;!--width - 可视区域的宽度，值可为数字或关键词device-width --&gt; &lt;!--height - viewport的高度--&gt; &lt;!--initial-scale - 初始的缩放比例--&gt; &lt;!--minimum-scale - 允许用户缩放到的最小比例--&gt; &lt;!--maximum-scale - 允许用户缩放到的最大比例--&gt; &lt;!--user-scalable - 用户是否可以手动缩放--&gt; &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable = 0" /&gt; &lt;!--content="telephone=yes" 在iPhone 手机上默认值是（电话号码显示为拨号的超链接）：--&gt; &lt;!--可将telephone=no，则手机号码不被显示为拨号链接--&gt; &lt;!--使设备浏览网页时对数字不启用电话功能（不同设备解释不同，itouch点击数字为存入联系人，iphone为拨打电话），忽略将页面中的数字识别为电话号码。--&gt; &lt;meta name="format-detection" content="telephone=no" /&gt; &lt;!--忽略识别邮箱--&gt; &lt;meta name="format-detection" content="email=no" /&gt; &lt;!--网站开启对 web app 程序的支持--&gt; &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt; &lt;!--在 web app 应用下状态条（屏幕顶部条）的颜色；(改变顶部状态条的颜色)--&gt; &lt;!--默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）；--&gt; &lt;meta name="apple-mobile-web-app-status-bar-style" content="black"&gt; &lt;!--http-equiv="Content-Type" 表示描述文档类型--&gt; &lt;!--HTTP-EQUIV类似于HTTP的头部协议，它回应给浏览器一些有用的信息，以帮助正确和精确地显示网页内容--&gt; &lt;meta http-equiv="Content-Type" content="text/html"&gt; &lt;!-- UC默认竖屏 ，UC强制全屏 --&gt; &lt;meta name="full-screen" content="yes"&gt; &lt;!--使用了application这种应用模式后，页面讲默认全屏，禁止长按菜单，禁止收拾，标准排版，以及强制图片显示。--&gt; &lt;!--应用模式--&gt; &lt;meta name="browsermode" content="application"&gt; &lt;!-- QQ强制竖屏 QQ强制全屏 --&gt; &lt;!--设置屏幕方向--&gt; &lt;meta name="x5-orientation" content="portrait"&gt; &lt;!--设置全屏--&gt; &lt;meta name="x5-fullscreen" content="true"&gt; &lt;!--设置屏幕模式--&gt; &lt;meta name="x5-page-mode" content="app"&gt; &lt;!-- windows phone 点击无高光 --&gt; &lt;meta name="msapplication-tap-highlight" content="no"&gt;&lt;/head&gt;&lt;/html&gt; 一、天猫 1234567&lt;title&gt;天猫触屏版&lt;/title&gt; &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt; &lt;meta charset="utf-8"&gt; &lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"&gt; &lt;meta content="yes" name="apple-mobile-web-app-capable"&gt; &lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt; &lt;meta content="telephone=no" name="format-detection"&gt; 二、淘宝 123456789101112131415161718192021222324&lt;title&gt;淘宝网触屏版&lt;/title&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="yes" name="apple-mobile-web-app-capable"&gt;&lt;meta content="yes" name="apple-touch-fullscreen"&gt;&lt;meta content="telephone=no" name="format-detection"&gt;&lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt;&lt;meta property="wb:webmaster" content="c51923015ca19eb1"&gt;&lt;meta name="author" content="m.taobao.com"&gt;&lt;meta name="copyright" content="Copyright ©m.taobao.com 版权所有"&gt;&lt;meta name="revisit-after" content="1 days"&gt;&lt;meta name="keywords" content=""&gt;&lt;meta name="description" content=""&gt;&lt;title&gt;淘宝网触屏版&lt;/title&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="yes" name="apple-mobile-web-app-capable"&gt;&lt;meta content="yes" name="apple-touch-fullscreen"&gt;&lt;meta content="telephone=no" name="format-detection"&gt;&lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt;&lt;meta property="wb:webmaster" content="c51923015ca19eb1"&gt;&lt;meta name="author" content="m.taobao.com"&gt;&lt;meta name="copyright" content="Copyright ©m.taobao.com 版权所有"&gt;&lt;meta name="revisit-after" content="1 days"&gt;&lt;meta name="keywords" content=""&gt;&lt;meta name="description" content=""&gt; 三、京东 1234567&lt;title&gt; 京东 - 手机版 &lt;/title&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;"&gt;&lt;meta name="format-detection" content="telephone=no"&gt;&lt;meta name="Keywords" content="手机购物,WAP商城,日用百货,3C家电,汽车用品"&gt;&lt;meta name="description" content="京东手机版提供了包括数码、家电、手机、电脑配件、网络产品、日用百货等数万种商品，手机快捷购物，就上京东手机版。"&gt; 四、网易 12345&lt;title&gt;手机网易网&lt;/title&gt;&lt;meta charset="UTF-8"&gt;&lt;meta content="width=device-width,user-scalable=no" name="viewport"&gt;&lt;meta name="apple-itunes-app" content="app-id=425349261"&gt;&lt;meta name="apple-mobile-web-app-capable" content="yes"&gt; 五、百度 1234567891011121314151617181920212223&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;&lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"&gt;&lt;meta name="format-detection" content="telephone=no"&gt; meta指元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。手机端特有的有哪些？&lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"&gt; &lt;meta content="yes" name="apple-mobile-web-app-capable"&gt; &lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt; &lt;meta content="telephone=no" name="format-detection"&gt;第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；width - viewport的宽度 height - viewport的高度 initial-scale - 初始的缩放比例 minimum-scale - 允许用户缩放到的最小比例 maximum-scale - 允许用户缩放到的最大比例 user-scalable - 用户是否可以手动缩放第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；在web app应用下状态条（屏幕顶部条）的颜色；默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。注意：若值为“black-translucent”将会占据页面px位置，浮在页面上方（会覆盖页面20px高度–iphone4和itouch4的Retina屏幕为40px）。第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码。 .after()在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。 .after()在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点。 .append()在每个匹配元素里面的末尾处插入参数内容。]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-router模式]]></title>
    <url>%2Fvue-router%E6%A8%A1%E5%BC%8F.html</url>
    <content type="text"><![CDATA[vue-router执行过程：当用户点击 router-link 标签时，会去寻找它的 to 属性， 它的 to 属性和 js 中配置的路径{path 一一对应，从而找到了匹配的组件， 最后把组件渲染到 标签所在的地方。 vue-router实现单页面路由三种方式：hash模式、history模式、abstract模式，根据mode参数来决定采用哪一种方式。 vue-router在单页面应用中,则是组件之间的切换.其本质就是:建立并管理url和对应组件之间的映射关系. 前端路由是通过改变URL，在不重新请求页面的情况下，更新页面视图。 目前在浏览器环境中这一功能的实现主要有2种: 利用URL中的hash； 利用H5中history； hashhistory在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于： 1http://www.xxx.com/#/login hash即浏览器url中#后面的内容，包含#。hash是URL中的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会加载相应位置的内容，不会重新加载页面。 即#是用来指导浏览器动作的，对服务器端完全无用，HTTP请求中，不包含#。 每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。 123456function matchAndUpdate () &#123; // todo 匹配 hash 做 dom 更新操作&#125;window.addEventListener('hashchange', matchAndUpdate) HTML5 history14年后，因为 HTML5 标准发布。多了两个 API，pushState 和 replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。同时还有popstate 事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。 1234567function matchAndUpdate () &#123; // todo 匹配路径 做 dom 更新操作&#125;window.addEventListener('popstate', matchAndUpdate) abstract模式abstract模式是使用一个不依赖于浏览器的浏览历史虚拟管理后端。根据平台差异可以看出，在 Weex 环境中只支持使用 abstract 模式。 不过，vue-router 自身会对环境做校验，如果发现没有浏览器的 API，vue-router 会自动强制进入 abstract 模式，所以 在使用 vue-router 时只要不写 mode 配置即可，默认会在浏览器环境中使用 hash 模式，在移动端原生环境中使用 abstract 模式。 （当然，你也可以明确指定在所有情况下都使用 abstract 模式）。.]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack性能优化]]></title>
    <url>%2Fwebpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</url>
    <content type="text"><![CDATA[webpack 介绍 webpack是当前最流行的打包构建工具之一 深度利用他的优点去优化代码，将脚本拆分成不同的部分，同时剔除用代码能够保证你的应用维持最小的宽带和进程消耗 webpack 懒加载Lazy-load code that you don’t need right now 懒加载 图片懒加载 测试 测试3 增加slide balbel]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅拷贝和深拷贝]]></title>
    <url>%2F%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D.html</url>
    <content type="text"><![CDATA[数据类型要讲浅拷贝和深拷贝之前得先回顾一下JS中的数据类型，主要分为： 基本数据类型 Number,String,Boolean,Undefined,Null,Symbol（ECMAScript6 新定义） 引用数据类型 Object js中每个数据都需要内存空间，内存空间又分为两种，栈内存（stack）和堆内存（heap） 栈内存一般储存基础数据类型 堆内存一般存储引用数据类型 浅拷贝 VS 深拷贝浅拷贝是和深拷贝比较的，深拷贝可以理解为递归进行浅拷贝。深拷贝为了解决对象中依旧含有对象，例如 1234let a = &#123; name: 'LiHua', habits: ['a', 'b']&#125; 普通的=赋值：b=a，b如果修改了b.name，那么a.name也会改变 浅拷贝，b，如果修改了b.name, a.name不会改变，但是修改b.habits数组中的值，a.habits的值也会改变 深拷贝，b的值改变，不会对a产生任何影响 深拷贝与浅拷贝只针对于复杂数据类型。。 推荐资源：javaScript中浅拷贝和深拷贝的实现 浅拷贝：将对象中的各个属性依次进行复制，浅拷贝只复制了一层对象的属性。如果对象属性中还有对象，那么赋值的仅仅是地址。还是会相互影响。 深拷贝：将对象中的各个属性一次进行复制，深拷贝会递归赋值所有层对象的属性。如果对象属性中还有对象，会继续拷贝，这样拷贝出来的对象完全独立。 因此，我们要访问堆内存中的引用数据类型时，实际上是先从栈中获取到该对象的引用地址，然后再从堆内存中读取到需要的数据 浅拷贝和深拷贝的实现12345678// 先有一个对象 例如var obj = &#123; name : 'zs', age: 18, car : &#123; brand: '牧马人' &#125;&#125; 深拷贝的实现 JSON序列化 1234// 实现浅拷贝var obj2 = JSON.parse(JSON.stringify(obj)) 遍历对象 递归 1234567891011121314function cloneObj(obj) &#123; //如果不是对象，不拷贝 if (typeof obj !== "object") &#123; return; &#125; var temp = &#123;&#125;; for (var k in obj) &#123; //如果对象的属性是复杂类型，递归复制 //如果对象的属性是简单类型，直接复制 temp[k] = typeof obj[k] === "object" ? cloneObj(obj[k]) : obj[k]; &#125; return temp;&#125;cloneObj(obj) jQuery.extend()方法实现 jQuery的源码 - src/core.js #L121源码 浅拷贝的实现 遍历对象不用判断是否引用类型即可 Object.assign() Object.assign可以把任意多个的源对自身的可枚举属性拷贝给目标对象，然后返回目标对象 1var obj3 = Object.assign(&#123;&#125;, obj);]]></content>
      <categories>
        <category>js基础</category>
      </categories>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>表格</tag>
        <tag>表单验证</tag>
      </tags>
  </entry>
</search>
